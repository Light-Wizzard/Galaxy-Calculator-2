#
# Galaxy Calculator 2 appveyor configuration files
# https://ci.appveyor.com/tools/validate-yaml
#https://www.appveyor.com/docs/build-environment/#qt
# https://download.qt.io/snapshots/ifw/installer-framework/30/
#
version: '{branch}-{build}'

branches:
  only:
    - master

stack: python 3.9, python 3.8

build: off

configuration: Release

platform:
  - x64
  - x86

image:
  - Ubuntu
  - Visual Studio 2019

for:
-
  matrix:
    only:
      - image: Ubuntu
  environment:
    #PRJLIBS: VCRUNTIME140.dll MSVCP140.dll
    RUNTIME_LINKAGE: static
    COVERITY_BUILD_CANDIDATE: True
    MY_BIN_PRO_RES_NAME: GalaxyCalculator2
    MY_OS: Ubuntu
    MY_COMPILER: "Qt"
    MY_QT_VERSION: 5.15.2
    MY_VS_VERSION: 2019
    MY_QT_IF_VERSION: '4.1.1'
    MY_QIF_PACKAGE_URI: 'packages/com.lightwizzard.galaxycalculator2/data'
    MY_PYTHON_VER: 3.9
    MY_PYTHON_REQUIRED: true
    MY_UPGRADE_OS: false # apt-get upgrade: true or false only
    MY_RUN_DOXYFILE: false;
  install:
    # Create our AppVeyor version
    - ps: $env:REPO_NAME =  $env:APPVEYOR_REPO_NAME.Substring($env:APPVEYOR_REPO_NAME.IndexOf('/') + 1)
    - ps: $env:package_version = ("$(git describe --tags --always --long)").trim()
    - ps: Update-AppveyorBuild -Version "$env:package_version-$env:APPVEYOR_BUILD_NUMBER"
    - sh: bash -c "scripts/install.sh"
  build_script:
    - sh: bash -c "scripts/build_script.sh"
  artifacts:
    - path: '*.zip'
      name: 'ZipInstaller'

-
  matrix:
    only:
      - image: Visual Studio 2019
  environment:
    #PRJLIBS: VCRUNTIME140.dll MSVCP140.dll
    RUNTIME_LINKAGE: static
    COVERITY_BUILD_CANDIDATE: True
    MY_BIN_PRO_RES_NAME: GalaxyCalculator2
    MY_OS: Windows # No Spaces
    MY_COMPILER: "Qt"
    MY_QT_VERSION: 5.15.2
    MY_VS_VERSION: 2019
    MY_QT_MINGW32: mingw81_32
    MY_QT_MINGW64: mingw81_64
    MY_QT_TOOLS_MINGW32: mingw810_32
    MY_QT_TOOLS_MINGW64: mingw810_32 # mingw810_64?
    MY_QT_IF_VERSION: '4.1.1'
    MY_QIF_PACKAGE_URI: 'packages\com.lightwizzard.galaxycalculator2\data'
    MY_PYTHON_VER: 3.8 # Last version Windows 7 can run
    MY_PYTHON_REQUIRED: true
    MY_RUN_DOXYFILE: false;
  install:
    # Create our AppVeyor version
    - ps: $env:REPO_NAME =  $env:APPVEYOR_REPO_NAME.Substring($env:APPVEYOR_REPO_NAME.IndexOf('/') + 1)
    - ps: $env:package_version = ("$(git describe --tags --always --long)").trim()
    - ps: Update-AppveyorBuild -Version "$env:package_version-$env:APPVEYOR_BUILD_NUMBER"
    # Qt x64
    - ps: |
        If ($env:PLATFORM -eq "x64" -And $env:MY_COMPILER -eq "Qt") {
           Write-Host "install Windows QT x64" -ForegroundColor DarkGreen
           $env:Path += ";C:\Qt\Tools\$env:MY_QT_MINGW64\bin"
           $env:Path += ";C:\Qt\$env:MY_QT_VERSION\$env:MY_QT_MINGW64\bin"
           $env:Path += ";C:\Qt\$env:MY_QT_VERSION\$env:MY_QT_MINGW64"
           $env:Path += ";C:\Python$env:MY_PYTHON_VER-x64"
           $env:Path += ";C:\MINGW\bin\"
           $env:MY_QT_BAT = "C:\Qt\$env:MY_QT_VERSION\$env:MY_QT_MINGW64\bin\qtenv2.bat"
           $env:MY_VS_BAT = "C:\Program Files (x86)\Microsoft Visual Studio\$env:MY_VS_VERSION\Community\VC\Auxiliary\Build\vcvars64.bat"
           Invoke-Expression $env:MY_QT_BAT
           Invoke-Expression $env:MY_VS_BAT
        }
        Else {
           Write-Host "install Windows QT x86" -ForegroundColor DarkGreen
           $env:Path += ";C:\Qt\Tools\$env:MY_QT_MINGW32\bin"
           $env:Path += ";C:\Qt\$env:MY_QT_VERSION\$env:MY_QT_MINGW32\bin"
           $env:Path += ";C:\Qt\$env:MY_QT_VERSION\$env:MY_QT_MINGW32"
           $env:Path += ";C:\Python$env:MY_PYTHON_VER"
           $env:Path += ";C:\MINGW\bin\"
           $env:MY_QT_BAT = "C:\Qt\$env:MY_QT_VERSION\$env:MY_QT_MINGW64\bin\qtenv2.bat"
           $env:MY_VS_BAT = "C:\Program Files (x86)\Microsoft Visual Studio\$env:MY_VS_VERSION\Community\VC\Auxiliary\Build\vcvars32.bat"
           Invoke-Expression $env:MY_QT_BAT
           Invoke-Expression $MY_VS_BAT
        }
    #- cmd: bash -lc "if %platform%==x64 && %MY_COMPILER%==Qt; then set PATH=C:\Qt\Tools\%MY_QT_MINGW64%\bin;C:\Qt\%MY_QT_VERSION%\%MY_QT_MINGW64%\bin;C:\Qt\%MY_QT_VERSION%\%MY_QT_MINGW64%\;%PATH% fi"
    #- cmd: bash -lc "if %platform%==x64 && %MY_COMPILER%==Qt; then call C:\Qt\%MY_QT_VERSION%\%MY_QT_MINGW64%\bin\qtenv2.bat fi"
    # Vs x64
    - ps: |
        If ($env:PLATFORM -eq "x64" -And $env:MY_COMPILER -eq "Vs") {
           $env:Path += ";C:\Qt\Tools\$env:MY_QT_MINGW64\bin"
           $env:Path += ";C:\Qt\$env:MY_QT_VERSION\msvc$env:MY_VS_VERSION_64\bin"
           $env:Path += ";C:\Python$env:MY_PYTHON_VER-x64"
           $env:Path += ";C:\MINGW\bin\"
           Invoke-Expression "C:\Qt\$env:MY_QT_VERSION\$env:MY_QT_MINGW64\bin\qtenv2.bat"
           Invoke-Expression "C:\Program Files (x86)\Microsoft Visual Studio\$env:MY_VS_VERSION\Community\VC\Auxiliary\Build\vcvars64.bat"
        }
        Else {
           $env:Path += ";C:\Qt\Tools\$env:MY_QT_MINGW32\bin"
           $env:Path += ";C:\Qt\$env:MY_QT_VERSION\$env:MY_QT_MINGW32\bin"
           $env:Path += ";C:\Qt\$env:MY_QT_VERSION\$env:MY_QT_MINGW32"
           $env:Path += ";C:\Python$env:MY_PYTHON_VER"
           $env:Path += ";C:\MINGW\bin\"
           Invoke-Expression "C:\Qt\$env:MY_QT_VERSION\msvc$env:MY_VS_VERSION\bin\qtenv2.bat"
           Invoke-Expression "C:\Program Files (x86)\Microsoft Visual Studio\$env:MY_VS_VERSION\Community\VC\Auxiliary\Build\vcvars32.bat"
        }
    #- cmd: bash -lc "if %platform%==x64 && %MY_COMPILER%==Vs; then set PATH=C:\Qt\Tools\%MY_QT_MINGW64%\bin;C:\Qt\%MY_QT_VERSION%\msvc%MY_VS_VERSION%_64\bin;%PATH% fi"
    #- cmd: bash -lc "if %platform%==x64 && %MY_COMPILER%==Vs; then call C:\Qt\%MY_QT_VERSION%\msvc%MY_VS_VERSION%_64\bin\qtenv2.bat" fi"
    # Python x64
    #- cmd: if %platform%==x64 set PATH=C:\Python%MY_PYTHON_VER-x64%;%PATH%
    #- cmd: if %platform%==x64 call "C:\Program Files (x86)\Microsoft Visual Studio\%MY_VS_VERSION%\Community\VC\Auxiliary\Build\vcvars64.bat"
    # Qt x86
    #- cmd: bash -lc "if %platform%==x86 && %MY_COMPILER%==Qt; then set PATH=C:\Qt\Tools\%MY_QT_MINGW32%\bin;C:\Qt\%MY_QT_VERSION%\bin;%PATH% fi"
    #- cmd: bash -lc "if %platform%==x86 && %MY_COMPILER%==Qt; then call C:\Qt\%MY_QT_VERSION%\%MY_QT_MINGW32%\bin\qtenv2.bat" fi"
    # Vs x86
    #- cmd: bash -lc "if %platform%==x86 && %MY_COMPILER%==Vs; then set PATH=C:\Qt\Tools\%MY_QT_MINGW32%\bin;C:\Qt\%MY_QT_VERSION%\msvc%MY_VS_VERSION%\bin;%PATH% fi"
    #- cmd: bash -lc "if %platform%==x86 && %MY_COMPILER%==Vs; then call C:\Qt\%MY_QT_VERSION%\msvc%MY_VS_VERSION%\bin\qtenv2.bat" fi"
    # Python x86
    #- cmd: if %platform%==x86 set PATH=C:\Python%MY_PYTHON_VER%;%PATH%
    #- cmd: if %platform%==x86 call "C:\Program Files (x86)\Microsoft Visual Studio\%MY_VS_VERSION%\Community\VC\Auxiliary\Build\vcvars32.bat"
    #
    #- cmd: set PATH=C:\MINGW\bin\;%PATH%
    #
    # C:\mingw-w64\ missing from 2019 matrix
    #- cmd: scripts\install.cmd
    #- ps: scripts\install.ps1
  build_script:
    # - ps: Invoke-Expression -Command "scripts\build_script.ps1"
    # Qt
    # DESTDIR=%cd%
    - ps: |
        If ($env:PLATFORM -eq "x64" -And $env:MY_COMPILER -eq "Qt") {
          Write-Host "build_script Windows QT x64" -ForegroundColor DarkGreen
          Set-Location -Path $env:APPVEYOR_BUILD_FOLDER
          New-Item -Path 'build' -ItemType Directory
          Set-Location -Path build
          $env:INSTALL_ROOT=AppDir
          $env:BUILD_ROOT=$env:APPVEYOR_BUILD_FOLDER\build
          Invoke-Expression "qmake -r -Wall -Wlogic -Wparser $env:APPVEYOR_BUILD_FOLDER\$env:MY_BIN_PRO_RES_NAME.pro -o AppDir CONFIG+=$env:CONFIGURATION CONFIG+=c++11 CONFIG+=x86_64 DESTDIR=AppDir $env:APPVEYOR_BUILD_FOLDER\build"
          Write-Host "build_script Windows QT x64 mingw32-make -j 2"
          Invoke-Expression "mingw32-make -j 2"
          Write-Host "build_script Windows QT x64 mingw32-make install INSTALL_ROOT=AppDir"
          Invoke-Expression "mingw32-make install INSTALL_ROOT=AppDir"
        }
        Else {
          Write-Host "build_script Windows QT x86" -ForegroundColor DarkGreen
          Set-Location -Path $env:APPVEYOR_BUILD_FOLDER
          New-Item -Path 'build' -ItemType Directory
          Set-Location -Path build
          $env:INSTALL_ROOT=AppDir
          $env:BUILD_ROOT=$env:APPVEYOR_BUILD_FOLDER\build
          Invoke-Expression "qmake -r -Wall -Wlogic -Wparser -spec win32-g++ $env:APPVEYOR_BUILD_FOLDER\$env:MY_BIN_PRO_RES_NAME.pro -o AppDir CONFIG+=$env:CONFIGURATION CONFIG+=c++11 CONFIG+=x86 DESTDIR=AppDir $env:APPVEYOR_BUILD_FOLDER\build"
          Invoke-Expression "mingw32-make -j 2"
          Invoke-Expression "mingw32-make install INSTALL_ROOT=AppDir"
        }
    #
    # Vs
    - ps: |
        If ($env:PLATFORM -eq "x64" -And $env:MY_COMPILER -eq "Vs") {
          Write-Host "build_script Windows VS x64" -ForegroundColor DarkGreen
          Set-Location -Path $env:APPVEYOR_BUILD_FOLDER
          New-Item -Path 'build' -ItemType Directory
          Set-Location -Path build
          $env:INSTALL_ROOT=AppDir
          $env:BUILD_ROOT=$env:APPVEYOR_BUILD_FOLDER\build
          $env:MY_QT_MAKE="qmake -r -Wall -Wlogic -Wparser $env:APPVEYOR_BUILD_FOLDER%\$env:MY_BIN_PRO_RES_NAME.pro CONFIG+=$env:CONFIGURATION CONFIG+=c++11 CONFIG+=x86_64 DESTDIR=AppDir $env:APPVEYOR_BUILD_FOLDER\build"
          Invoke-Expression $env:MY_QT_MAKE
          $env:MY_QT_MAKE="mmake"
          Invoke-Expression $env:MY_QT_MAKE
          $env:MY_QT_MAKE="mmake install INSTALL_ROOT=AppDir"
          Invoke-Expression $env:MY_QT_MAKE
        }
        Else {
          Write-Host "build_script Windows VS x86" -ForegroundColor DarkGreen
          Set-Location -Path $env:APPVEYOR_BUILD_FOLDER
          New-Item -Path 'build' -ItemType Directory
          Set-Location -Path build
          $env:INSTALL_ROOT=AppDir
          $env:BUILD_ROOT=$env:APPVEYOR_BUILD_FOLDER\build
          $env:MY_QT_MAKE="qmake -r -Wall -Wlogic -Wparser -spec win32-g++ $env:APPVEYOR_BUILD_FOLDER\$env:MY_BIN_PRO_RES_NAME.pro CONFIG+=$env:CONFIGURATION CONFIG+=c++11 CONFIG+=x86 DESTDIR=AppDir $env:APPVEYOR_BUILD_FOLDER\build"
          Invoke-Expression $env:MY_QT_MAKE
          $env:MY_QT_MAKE="mmake"
          Invoke-Expression $env:MY_QT_MAKE
          $env:MY_QT_MAKE="mmake install INSTALL_ROOT=AppDir"
          Invoke-Expression $env:MY_QT_MAKE
        }
    #- ps: scripts\build_script.ps1
    #- cmd: scripts\build_script.cmd
    #- cmd: echo "build_script Windows"
    #- cmd: cd %APPVEYOR_BUILD_FOLDER%
    #- cmd: mkdir build
    #- cmd: cd build
    #- cmd: mkdir AppDir
    #- cmd: set INSTALL_ROOT=AppDir
    #- cmd: set BUILD_ROOT=%APPVEYOR_BUILD_FOLDER%\build
    #- dir C:\Qt\%MY_QT_VERSION%\mingw81_64\bin
    #- cmd: bash -lc "if %PLATFORM%==x86 && %MY_COMPILER%==Qt; then qmake -v && qmake -r -spec win32-g++ %APPVEYOR_BUILD_FOLDER%\%MY_BIN_PRO_RES_NAME%.pro CONFIG+=%CONFIGURATION% CONFIG+=c++11 CONFIG+=x86 DESTDIR=AppDir && mingw32-make && mingw32-make install fi"
    #- cmd: bash -lc "if %PLATFORM%==x64 && %MY_COMPILER%==Qt; then qmake -v && qmake -r -spec win32-g++ %APPVEYOR_BUILD_FOLDER%\%MY_BIN_PRO_RES_NAME%.pro CONFIG+=%CONFIGURATION% CONFIG+=c++11 CONFIG+=x86_64 DESTDIR=AppDir && mingw32-make && mingw32-make install fi"
    #- cmd: bash -lc "if %PLATFORM%==x86 && %MY_COMPILER%==Vs; then qmake -v && qmake -r -spec win32-g++ %APPVEYOR_BUILD_FOLDER%\%MY_BIN_PRO_RES_NAME%.pro CONFIG+=%CONFIGURATION% CONFIG+=c++11 CONFIG+=x86 DESTDIR=AppDir && mmake && mmake install fi"
    #- cmd: bash -lc "if %PLATFORM%==x64 && %MY_COMPILER%==Vs; then qmake -v && qmake -r -spec win32-g++ %APPVEYOR_BUILD_FOLDER%\%MY_BIN_PRO_RES_NAME%.pro CONFIG+=%CONFIGURATION% CONFIG+=c++11 CONFIG+=x86_64 DESTDIR=AppDir && mmake && mmake install fi"
    #
    - cmd: dir
    - ps: |
        $currentDirectory = [System.AppDomain]::CurrentDomain.BaseDirectory.TrimEnd('\')
        if ($currentDirectory -eq $PSHOME.TrimEnd('\')) {
            $currentDirectory = $PSScriptRoot
        }
        Write-Host "After Windows build $env:currentDirectory" -ForegroundColor DarkGreen
        Get-ChildItem -Path AppDir
        Copy-Item "C:\Qt\Tools\QtCreator\bin\plugins\platforms\*" -Destination "AppDir" -Recurse
        Invoke-Expression "windeployqt AppDir\$env:MY_BIN_PRO_RES_NAME.exe --verbose=2"
        Invoke-Expression "7z a -tzip $env:MY_BIN_PRO_RES_NAME-$env:MY_OS-$env:CONFIGURATION-$env:PLATFORM.zip AppDir -r"
        Copy-Item "$env:APPVEYOR_BUILD_FOLDER\build\$env:MY_BIN_PRO_RES_NAME-$env:MY_OS-$env:CONFIGURATION-$env:PLATFORM.zip" -Destination "$env:APPVEYOR_BUILD_FOLDER\"
        Copy-Item "*.zip" -Destination "$env:APPVEYOR_BUILD_FOLDER\"
        Set-Location -Path $env:APPVEYOR_BUILD_FOLDER
        Write-Host "Completed-Build Windows" -ForegroundColor DarkGreen
    - cmd: dir
    #- cmd: dir AppDir
    #- cmd: echo -e "Completed-Build Windows"
    #- cmd: copy "%APPVEYOR_BUILD_FOLDER%\build\%MY_BIN_PRO_RES_NAME%.exe" AppDir
    #- cmd: copy C:\Qt\Tools\QtCreator\bin\plugins\platforms\* AppDir
    #- cmd: windeployqt "AppDir\%MY_BIN_PRO_RES_NAME%.exe" --verbose=2
    #- cmd: set ARTIFACT_APPIMAGE="%MY_BIN_PRO_RES_NAME%-%PLATFORM%.exe"
    #- cmd: set ARTIFACT_QIF="%MY_BIN_PRO_RES_NAME%-Linux-Installer";
    #- cmd: 7z a -tzip "%MY_BIN_PRO_RES_NAME%-%MY_OS%-%CONFIGURATION%-%PLATFORM%.zip" AppDir -r
    #- cmd: copy "%APPVEYOR_BUILD_FOLDER%\build\%MY_BIN_PRO_RES_NAME%-%MY_OS%-%CONFIGURATION%-%PLATFORM%.zip" "%APPVEYOR_BUILD_FOLDER%\
    #- cmd: echo "Running Qt Installer Framework";
    #- cmd: echo APPVEYOR_BUILD_FOLDER=%APPVEYOR_BUILD_FOLDER%
    #- cmd: echo C:\Qt\Tools\QtInstallerFramework\binarycreator.exe --offline-only -c "%APPVEYOR_BUILD_FOLDER%\config\config.xml" -p "%APPVEYOR_BUILD_FOLDER%\packages" "%MY_BIN_PRO_RES_NAME%-Windows-Installer.exe"
    #- cmd: echo ..\QtInstallerFramework-windows-x86-%MY_QT_IF_VERSION%.exe --offline-only -c "%APPVEYOR_BUILD_FOLDER%\config\config.xml" -p "%APPVEYOR_BUILD_FOLDER%\packages" "%MY_BIN_PRO_RES_NAME%-Windows-Installer.exe"
    #- cmd: echo 7z a -tzip "%MY_BIN_PRO_RES_NAME%-Windows-Installer.zip" "%MY_BIN_PRO_RES_NAME%-Windows-Installer.exe"
    #- cmd: copy *.zip %APPVEYOR_BUILD_FOLDER%
    #- cmd: cd %APPVEYOR_BUILD_FOLDER%
  artifacts:
    - path: '*.zip'
      name: 'ZipInstaller'

deploy:
- provider: GitHub
  release: continuous
  artifact: 'ZipInstaller'
  draft: false
  prerelease: true
  auth_token:
    secure: 5Kb03ANp7s6KeJKren+ROsEnuCk2tXGby36aqYpG0WV8xfHBg26Td9B4C9jpI/O/
############################################## End of File ####################

